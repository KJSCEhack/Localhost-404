IMAGE Model

// var mongoose=require("mongoose");

// //path and originalname are the fields stored in mongoDB
// var imageSchema = mongoose.Schema({
//      path: {
//          type: String,
//          required: true,
//          trim: true
//      },
//      originalname: {
//          type: String,
//          required: true
//      }
// });

// module.exports=mongoose.model("Image", imageSchema);




IMAGE In Problem Model
// image: {
    //     id:{
    //         type: mongoose.Schema.Types.ObjectId,
    //         ref: "Image"
    //     }
    // }
    
    
    
    
In App.js
//==============================
//For Uploading Images
//==============================

// //INIT GFS
// var gfs;

// conn.once('open', function(){
//   // Init stream
//   gfs = grid(conn.db, mongoose.mongo);
//   gfs.collection('uploads');
// });

// //CREATE STORAGE ENGINE
// var storage = new gridFsStorage({
//   url: "mongodb://localhost/hackathon_project",
//   file: function(req, file){
//     return new Promise(function(resolve, reject){
//       crypto.randomBytes(16, function(err, buf){  //Used to generate names
//         if (err) {
//           return reject(err);
//         }
//         var filename = buf.toString('hex') + path.extname(file.originalname);
//         var fileInfo = {
//           filename: filename,
//           bucketName: 'uploads'  //should match the collection name
//         };
//         resolve(fileInfo);
//       });
//     });
//   }
// });
// var upload = multer({ storage });





In app.js (Greeva)
// app.post('/problems/create', function(req, res, next) {
     
//     res.send(req.files);
     
//     /*req.files has the information regarding the file you are uploading...
//     from the total information, i am just using the path and the imageName to store in the mongo collection(table)
//     */
//     var path = req.files[0].path;
//     var imageName = req.files[0].originalname;
     
//     var imagepath = {};
//     imagepath['path'] = path;
//     imagepath['originalname'] = imageName;
     
//     //imagepath contains two objects, path and the imageName
     
//     //we are passing two objects in the addImage method.. which is defined above..
//     app.addImage(imagepath, function(err) {
//      if(err)
//         console.log(err);
//      else
//      {}
//     });
     
// });


//========================
//UPLOAD IMAGE Routes
//========================    
    // app.getImages = function(callback, limit) {
 
    // Image.find(callback).limit(limit);
    // }
     
     
    // app.getImageById = function(id, callback) {
      
    //  Image.findById(id, callback);
     
    // }
     
    // app.addImage = function(image, callback) {
    //  Image.create(image, callback);
    // }
    
    // // To get more info about 'multer'.. you can go through https://www.npmjs.com/package/multer..
    // var storage = multer.diskStorage ({
    // destination: function(req, file, cb) {
    //     cb(null, 'uploads/')
    //  },
    // filename: function(req, file, cb) {
    //     cb(null, file.originalname);
    //  }
    // });
     
    // var upload = multer ({
    //  storage: storage
    // });
     
    // // app.get('/', function(req, res, next) {
    // //  res.render('index.ejs');
    // // });
     